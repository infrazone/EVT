How It Works
Reads the CSV: The script skips the header (tail -n +2) and reads each row.
Parses Columns: Expects 9 columns in the specified order. If there arenâ€™t enough columns, it skips the row.
Validates Subscription:
Checks if the subscription ID is a valid UUID.
If --strict-check is used, verifies you have access to that subscription.
Builds Tag List: Only includes tags for which there is a non-empty field.
Applies Tags: Uses az resource tag --is-incremental to ensure existing tags remain.
Summarizes: Logs how many subscriptions were updated, skipped, or failed.
Key Features & Options
--dry-run: Show which tags would be applied without actually applying them.
--verbose: Print additional information for each CSV row.
--log-file <path>: Write all console output to a log file as well.
--strict-check: Validate that you (the signed-in user) can access the subscription.
Next Steps / Recommendations
Parallel Execution: For large environments, consider using background jobs or GNU Parallel to speed up tagging.
Advanced CSV Parsing: If your CSV has quotes, commas in fields, etc., use a more robust CSV parsing method (e.g., Python).
Validation with Resource Graph:
kusto
Copy
Resources
| where type == 'microsoft.resources/subscriptions'
| where subscriptionId == '<GUID>'
| project tags
Switch to az subscription update if az resource tag becomes unreliable.
bash
Copy
az subscription update --subscription <subscriptionId> --tags key=value ...
This script should cover all of your required tags while preserving existing ones. Simply run it after logging into Azure via az login, and verify the results in the console or your chosen log file.